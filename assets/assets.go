// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/Discord.lnk (1.9kB)
// res/pinned_update.json (13.292kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4d\x68\x23\x65\x18\xc7\x7f\x69\x2b\xda\x93\x11\x43\xa0\x55\x49\xaa\xa6\x08\x3a\x93\x8f\xa6\x21\x4d\x51\x5a\xf3\x61\x4a\x12\x1a\x12\x62\x43\x1d\xa5\xe3\x64\xa0\x43\x1b\x32\x9d\x49\xa1\xad\x78\xf4\x52\x2c\x08\x1e\x0c\x58\x69\x11\x41\x29\x78\x10\x3c\x08\x8a\x78\xf0\x2c\x3d\x54\xf1\x68\x2b\x82\x14\x41\x41\x3c\xd5\x65\x97\x79\x33\x29\x9b\xb4\xcb\x1e\xf6\xb4\xcb\xfe\x87\x79\xbf\x9e\xff\xfb\x7f\x3e\x12\x9e\x29\x02\x1e\xdf\x10\x0e\x7e\x10\x23\xb9\x9b\x73\x10\x04\xfe\xb9\xf1\xdf\xc5\xd0\xda\x89\xe7\x1b\xff\xdb\xa3\xc3\x6b\x27\x9e\xde\x1e\x17\x97\x0b\x17\x7f\xe0\x23\x50\xfe\x6d\xf1\x38\x78\x9e\x32\xbc\x9f\xfe\xfa\x18\x2f\x46\x22\x9f\x8c\x11\x4e\xa7\x14\xae\xe2\x75\xa2\x62\x5e\x2a\x2d\x77\xbc\x64\x0c\x5b\x6b\x59\x0d\xe6\x18\x65\x84\xbf\xbf\x5f\x2a\xbd\xda\x71\x2c\x32\x50\x7f\xce\xe1\xbd\x35\x70\x7f\xf9\xf1\x80\x27\x83\x81\x8d\x46\x0b\x8b\x06\xe0\x67\x85\x98\xab\x5a\xef\x04\xa9\x99\x0d\xb5\xad\xcb\xfa\x96\x0e\xb9\x4b\xe5\x7a\xc7\x79\x1d\xe5\xa3\x09\x87\xbb\x3f\xd2\xaf\xec\x7d\xc5\xe7\xa9\x61\xd2\x40\xa5\x8d\x8e\x8c\xce\x16\x3a\x30\x0e\x38\x25\x7b\xda\x4d\xdf\x99\xa7\xdd\x5b\x05\x60\x0c\x18\x06\x12\xaf\xfd\x3e\xe2\x05\x32\xc6\xf3\x1b\x9b\x7a\x30\x4d\x3a\xa5\xb8\x19\x2a\xb7\xc7\x34\x41\x7f\x06\x41\x24\x82\xac\xd2\xa6\x8d\x89\x4d\x8a\x30\x61\x1a\x7d\x1c\x15\x13\x13\x59\xec\x9b\x84\x79\x0a\x19\x19\xa5\x6f\xec\x57\x55\xb8\x2e\x1b\x3f\x69\x52\xd7\x70\xbb\xfa\x12\x11\x64\xf1\x4e\x11\x21\xca\x38\x12\x12\x26\x16\x2d\x34\x74\x6c\x6c\xaa\xb4\x51\xb1\x68\x13\x1c\x50\xe9\xf9\x78\xc9\xf5\x51\xc3\x46\xc7\xc2\x46\x41\xc3\x42\x65\x87\x6d\x14\xe6\x85\xaf\x8c\x88\x4c\x45\xa1\x28\xd4\x55\xd6\xef\x18\x97\x8c\x21\xce\x7c\xc3\xf0\x28\x1c\x86\x6a\xd5\x6c\xa5\x5c\x59\xcc\x2d\x14\xb3\x21\x65\xde\x34\x33\x6a\x5b\x55\x8a\x2d\x4d\x5d\xbf\xac\xb8\x6a\x9a\xb2\xa1\xb5\xae\xf9\x0f\x3e\x18\x08\x51\xa3\x4a\x96\x0a\x65\x2a\x2c\x92\x63\x81\x22\x59\x42\xf7\x54\xe1\x87\xb8\xdf\xb0\xd2\xed\x3e\x87\x75\x77\xaf\x59\xea\xce\xb6\x64\x6a\x3d\xfb\xbe\xfd\xec\xc5\x8f\x67\x6f\x16\x8e\x3e\x4a\x4c\xce\x9e\x97\x0f\x62\xef\x7e\x3c\x5e\xfa\xe5\xcf\x27\xde\xfb\x20\xb3\xfb\x46\xf3\xeb\xbf\xee\x66\x9f\xf5\xc0\x28\x1c\xee\x01\xd1\x6a\xb9\x7a\xb6\x5b\xcf\x7d\x57\x4c\xa6\xbf\xfd\xff\xc9\x0f\x27\x3b\xcd\x9f\x36\x00\xd1\x4a\x03\x40\x18\xa8\x22\x11\x45\x62\x1a\x89\x98\x58\x4d\x89\x76\x92\x60\x8a\x24\x51\x62\xc4\x89\x21\x11\x27\x22\x9e\xa4\xb0\xc4\x49\x08\x6e\x94\x38\x49\x62\x24\x89\x10\x13\xcf\x8c\x38\x8d\x88\x86\xd4\x83\xe1\x06\x53\x7b\xa1\x78\xb0\x7d\x30\x53\xf8\xe2\xf8\xf4\x44\x3a\xfd\xf9\xdf\x12\xf0\x48\x2f\x98\x67\x9c\x6a\x88\x7e\x29\x63\xb3\xc1\x26\x06\x16\x16\x3a\xeb\xc8\x57\x7a\xd7\xe0\x57\xa5\x8b\x19\xd7\xd1\x57\xfe\x66\xe6\xcb\x3d\x33\xff\x79\x7e\x4e\xfe\xec\xe5\xad\xf7\x1d\xed\x55\x87\x90\x77\xca\xff\x4e\x21\xdf\xa5\x97\x03\x83\x3f\xcf\xad\x00\x00\x00\xff\xff\x6e\xf0\xe7\x2c\x6c\x07\x00\x00")

func discordLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordLnk,
		"Discord.lnk",
	)
}

func discordLnk() (*asset, error) {
	bytes, err := discordLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Discord.lnk", size: 1900, mode: os.FileMode(0666), modTime: time.Unix(1540321391, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x6c, 0x22, 0x76, 0x62, 0x29, 0xe1, 0xa8, 0x19, 0xde, 0xc6, 0x8e, 0xf1, 0x2e, 0x96, 0x78, 0xe6, 0x7f, 0xf, 0xe9, 0x3d, 0x65, 0xdd, 0x53, 0xae, 0x61, 0x66, 0xdf, 0xc4, 0x70, 0x21, 0x68}}
	return a, nil
}

var _pinned_updateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x9b\xdd\x6e\x5c\x37\x92\x80\xef\xfd\x14\x82\xae\x17\x56\xfd\xb3\x98\x57\x19\x04\x46\xb1\xaa\x18\x0b\x56\x2c\xad\x24\x67\x77\x76\x90\x77\x5f\xb4\x23\x77\x5a\x86\x33\xc0\x08\x69\x40\xd0\x8d\x20\x1e\xa2\x79\x0e\x3f\x7c\x5d\x24\xeb\x54\xff\xeb\xdd\xc5\xc5\xe5\xaf\xb7\xf5\xe5\xa6\x1f\x2e\x7f\xba\x38\x34\x2f\x2e\x2e\xeb\xfa\x21\x6f\xef\xeb\xc3\xff\x3d\x3c\xd6\xf1\xea\xc5\xc5\xe5\xfe\x72\x73\x73\xd2\xbe\xb8\xb8\xfc\x78\xfb\xf0\xf8\xe1\xb7\xbe\x7f\xb8\xbe\xfd\x7c\xf9\xd3\xc5\x3f\x8e\x3d\x17\x17\xf8\x5f\x27\x0d\x38\x6d\x4c\x54\x3b\x36\x7f\xfe\xb3\xe7\xe9\x41\x4e\xc6\x3b\x19\xe3\xf2\x2e\xf2\x53\xfc\xd2\x1f\x1e\x3e\x06\xa9\x5d\xfe\x74\x71\x99\xdb\x53\x87\x65\xa2\xd7\x52\xdd\x09\x49\xb8\x60\x2b\xcb\x46\x00\x4b\xef\xb1\xcc\x9d\x06\x57\xea\xe8\x39\x22\x9b\x95\x7b\x1a\xee\x6c\xb8\x3c\x19\xfd\xcb\xfd\x61\x66\x97\x1f\x1f\x1f\xef\x1e\x7e\xba\xba\xaa\x9b\xf7\x4f\x10\xe2\xee\xee\xfd\xe7\x7e\xbc\xaa\xeb\x87\xc7\xfb\xdb\xab\xb8\xbb\xbb\x7a\x78\x8c\x75\xd3\x57\xff\x73\xfd\xf9\xea\x7f\x4d\xae\xf0\x3d\xbc\x3f\x4c\xe9\xea\x14\xdb\x15\x5e\x1d\x68\xbd\xff\xe3\x63\x97\x4f\x37\xfa\xfd\xdb\x1d\x2f\xab\x6f\x1e\xe3\xe1\x19\xb2\x7f\x9d\x20\xfa\x77\x60\xbf\x43\xfb\x1d\xdc\xaf\x78\xf5\xe4\xc2\xcf\xa7\xbd\xff\x16\xf1\x0f\x21\x2b\xa6\x20\xdb\xd2\x21\x03\x3d\x59\x57\x29\x0a\x80\x0d\xa4\x69\x32\xb6\x83\xe9\x26\x2e\x09\xb6\x6a\xea\x2a\xdc\x23\xa7\x33\xc9\x62\xb6\xcb\x67\xe3\x9f\x03\xf3\xfd\xed\xaf\xdf\x3a\xf5\x0a\x2f\x8f\xb7\xfb\xfd\xe9\xbf\x9f\xdf\x9d\xa0\x3f\xba\x5d\xfd\xf0\xe9\xf1\xf6\xee\x43\xde\xde\xf7\x2b\x76\x7c\x0f\x77\x92\xb5\xc6\xc1\xe0\xcd\xc4\x9b\xe7\xa4\xa1\xb0\x98\xcb\x26\x04\xa5\x43\xa8\x2c\xb1\xb5\x2d\x07\xe3\xda\x02\x43\x66\xa7\xbb\x62\x9d\xcb\xf1\x53\x7c\x6f\xc6\xf5\xa1\x48\x2b\x72\xa8\x72\xa7\xad\x1a\x9d\xdb\xc5\x10\xdb\x64\x1b\xec\xa5\x92\xe1\x18\x03\x9c\x4b\x93\x68\x2b\x8d\x2a\xe7\x6a\x58\x41\x79\x3e\xd7\xbf\xc7\xfd\x32\xe7\x7f\xbb\xfe\xe5\xfa\x26\x3e\x3f\xbe\x66\xe1\x89\x0d\x2c\x17\x93\xa4\x75\x1a\x57\xa6\xf2\xc4\xdc\xc5\xbb\x30\xf7\x34\xa3\x55\x9b\x79\xf6\x8e\x82\xe2\x41\xb6\x51\x73\x18\xd2\x2e\xe3\x73\x09\x7f\x64\xf7\x66\x6c\x97\xf0\xc9\x8e\xde\x3c\xa9\x66\x71\x01\x12\x29\xb8\xd4\x54\x25\xc3\xde\xbb\x33\x96\xae\xde\x63\xe1\x20\x93\x9c\xb9\x73\x79\xcd\x16\x99\x71\x3e\xdb\x9f\xb1\x7e\x61\x78\xbf\x7e\xb8\x8b\xc7\xfc\xf8\x8a\x4d\x17\x6c\xf2\x44\xda\x4d\x8d\xe2\x9e\x62\x0b\xbd\x17\x34\x77\xac\x4d\x3e\x11\x73\xce\x59\xea\xba\x4d\x4d\xd2\x15\x3d\x65\x41\xee\xbd\xc5\xce\x16\xda\x9f\xd0\xbd\x19\xd1\xb9\x87\x0c\x72\x36\x73\x24\x48\xf4\x28\xc6\x09\xb2\xa2\x72\x37\x34\x2b\xe2\x64\x93\x52\x45\x5d\x94\x0c\xb6\x0c\x06\x43\xe5\x74\xf1\x71\xc6\xb0\x7e\x82\xfa\x65\x9e\x3f\xdc\xf5\xcd\x4d\x7e\xec\xfc\xf4\x8a\x4d\xdf\xc9\x20\xa8\xbc\x96\x32\x9b\xa5\xf1\x01\x7b\xb2\x84\x1b\x13\x5b\xd6\x66\x01\x62\x75\xf5\x79\xd8\xb3\x6b\x97\x8e\x11\x2b\xf6\xd6\x44\x3c\x97\xe9\x7f\xc2\x7b\x33\xae\xc3\xe2\xc2\x1a\x62\x56\xe6\xb4\xd7\x4a\x80\x8d\x31\x2c\x41\x0c\x9d\x0e\x1b\x9a\x24\xa6\x39\xba\x8c\x2b\x72\xd8\xde\x48\xa6\xbc\xc2\x41\xe8\x7c\xae\x3f\x87\xfd\x32\xdb\xef\xef\xf2\x15\x6b\x1e\x85\x56\x83\x62\x3a\xcb\x36\x37\x59\x58\xa8\x94\x07\xb4\xc1\x63\xe1\xda\x39\x0a\xa0\x77\x38\x36\x36\x00\x8d\x55\x3e\xc8\xd0\x31\x65\x9c\x4b\xf3\xfb\xbb\x7c\x33\x7e\x2f\x36\xeb\x1d\xbc\x0a\x1d\x74\x50\x83\x8f\xe0\xc3\xb1\x53\x84\x70\xca\xd2\xa1\x53\x57\x4c\x6a\x82\xd5\xd6\xc0\x53\xc4\xb2\x16\x4e\x24\x3b\xe3\x71\xf4\x89\xf2\x0b\xc3\x78\x7f\xba\xbf\x7e\x7c\xc5\x6e\x13\x93\x78\xae\x84\x54\x8f\xb1\x57\xed\x96\x6d\x43\x7a\xb8\x48\x6c\xd3\x1e\x60\x34\x29\x56\x39\xac\x98\x65\xec\x33\x7c\xee\x85\x34\xc1\xf6\xd9\x42\xf8\x57\x70\x6f\x46\x6f\x52\x0d\x65\x66\xe5\x2c\x58\x7b\x4e\x58\x55\x23\xab\x3b\xa9\x00\x48\x8a\x04\xbb\x9a\x60\x1e\x56\xd3\xa9\x6d\xcc\x9d\x95\x06\x52\x4a\x7a\xc6\xf0\x7d\x04\xfd\x32\xc3\xf3\xe6\xf6\x4b\x3d\xfc\xf3\xf3\x6b\x0e\xe0\x3d\x31\x16\x2d\xa7\x5a\xab\x96\xa3\xc5\x4c\xa7\xdd\xab\xa8\xd7\x32\x30\x75\x5d\x41\xdd\x6b\x27\xc0\x32\xdd\x32\xb7\x42\x8c\x34\x1d\x59\x67\x93\xfc\xc8\xee\xcd\x78\x9e\x98\x3d\x7b\xba\x0a\xc9\xe2\x64\xe5\xb9\x74\x42\x49\x85\xda\x9e\x87\x20\x5e\x76\xd0\xbf\x45\xc9\xd6\xd7\xa0\x33\x80\x1a\x83\x09\x49\xce\x98\x69\x79\xc6\xfa\x65\xaa\x7f\xba\xbf\x7e\xb8\x7b\xc5\x9a\x8b\xed\xc1\xa5\x8b\x6c\x02\xda\x24\xec\xdd\xa0\x7b\xd9\x94\xde\x64\x73\x7a\xec\x39\x63\x23\xe1\x4a\x2d\x9c\x22\xb2\x06\xa3\x6b\x77\xae\x29\xe7\xd2\xfc\x2b\xb7\x37\xa3\xf8\xdc\xd4\x1b\x27\x38\xb9\xba\x2b\x95\xe7\xe1\x40\x63\xb2\x29\x07\x2c\x1a\x3b\x28\x31\x66\x37\xd1\x00\xe3\x6a\x08\x16\x88\xd9\x68\x0e\x22\xe7\x53\xfc\xc8\xf9\x65\x7a\xff\x12\xbf\xf6\x87\x2f\x8f\xd7\x37\x0f\xaf\xd8\x71\x00\xcc\x01\x06\x5a\xcb\x76\x8d\x01\x90\xb2\x3b\xcb\x95\x86\xf8\x26\xd8\xcc\x99\x38\x18\xd9\x36\x8f\x00\xde\xd3\x91\x5b\xc1\x76\x52\xeb\xb9\x1c\xff\x13\xde\x9b\x11\x9d\x16\x0f\x59\xea\xcb\x16\xe4\x02\xb7\x41\xf4\x75\xd1\xf4\x82\x1e\x58\x13\x83\xd2\x77\xc9\x14\xde\xc4\xdb\xb7\xa9\x32\x66\xf7\x40\xf7\xe9\xe7\x13\xfd\x39\xec\x97\xd9\xde\xf7\x37\x87\x29\xbf\x62\xd5\xc5\x90\xa1\xab\x37\xfb\x90\xd1\xbb\xa6\x40\x34\xaf\x59\x94\x52\x2c\x54\x2d\x9c\x63\x23\xda\x4c\x22\x1f\xda\x28\x73\x75\x79\x75\x03\xe4\xb9\x54\x7f\x22\xf7\x66\x3c\x1f\xc3\xd9\x3d\x2a\x70\xfa\xdc\x08\x06\xb9\x62\x7a\xd1\xc6\x90\xe5\x0b\x1b\x7d\x85\x34\x07\x5a\x0f\xdb\x0c\x53\x48\x7a\x44\xec\x58\x06\xf3\x7c\x9e\x9f\x90\x7e\x99\xe4\x1f\x6f\x6f\x5f\xb5\xe1\x3c\xa3\x38\xca\x7a\x00\x0a\xd4\xb2\xdc\x62\x8b\xd5\x37\xd8\x58\x66\x3a\x70\xe0\xcc\xf4\xed\x31\x85\x82\x45\x43\x33\x38\x9b\x4c\xe1\x6c\xc1\xfc\x80\xed\xcd\xe8\xad\x39\x86\xab\xcf\xdc\xe0\x44\x06\xe9\xe5\xe1\x03\x19\x04\x1d\x3d\xc1\x31\x58\xc3\xb0\xa7\x4c\x55\x0f\xe9\x09\xe0\x9b\xc3\xa8\x31\xcf\xb8\x25\xff\x86\xf9\x65\x6e\xdf\xfe\xd6\xf7\x37\xf1\x4f\x7a\xc5\x7e\x0f\x1f\x87\x1d\x36\xc0\x64\x8c\x20\x1f\x3b\x51\x78\x6c\x2d\x9d\xdb\xa5\xc1\x62\x0f\xe5\xd8\x39\x5d\x75\x0b\x6a\x53\xec\xb1\x65\x26\x43\xe6\xd9\xfc\xfe\x86\xee\xcd\x38\x6e\x0b\x73\xec\x76\x6c\xde\x34\x42\x15\x24\x87\x58\x4f\x89\xd0\x29\x34\x20\x46\x37\xb7\xb2\xf0\x50\x90\xd5\x52\x31\xc9\x0f\x9b\xc2\xb5\x7d\x9d\xcf\xf1\x53\xd4\x2f\x7c\xb9\x7f\x7b\x9d\xaf\xf9\xc5\x7e\xe4\xd2\x99\xb4\x79\x80\x22\x4a\xeb\x9e\x09\xd9\x51\x86\xaa\x5d\x4d\xaa\x84\xa1\x0d\x35\x97\xc2\x21\x8e\x8b\x0e\x2e\xa3\xd8\x1c\x8a\x67\x4b\xae\x7c\xe5\xf6\x66\x0c\x1f\x16\xa2\x63\x3b\x32\x76\x86\x76\xaf\x81\x4a\x3c\xd6\x00\xcc\x30\x64\x5f\x58\xb3\x74\x50\xe6\xb6\x14\xf4\x5e\xea\x44\x6b\x93\x45\xc7\x19\xf3\xe3\x47\xce\x2f\xd3\xfb\xd7\xae\xeb\x78\xc5\x7a\x43\xc8\x86\xc3\x1f\xdb\x39\xb3\x57\x98\x26\x82\x8e\xa4\x1a\x06\xe2\x61\x20\x6c\xa9\x7b\x44\xba\xb2\x72\x64\x12\xef\x5c\x31\xdc\x3a\xfb\x5c\x7a\x7f\xe5\xf6\x66\xf4\x26\x35\xd1\x85\xe2\x02\x3a\x71\x46\x01\x38\xef\x04\xae\xe0\x8d\x53\xa7\xd5\x3c\xec\xfa\x84\x2c\xa1\xd7\x58\x8b\x53\x83\x81\x6a\x12\xc9\x39\xf3\x86\x47\xce\x2f\xd4\xfb\xbb\x1a\xdc\xd7\x27\x38\xad\x60\x80\x56\x5f\xb4\x93\xf7\x1c\xc5\x05\x93\x6b\x04\x56\xd0\x1c\x30\xec\xa0\xfb\xe2\x85\x2b\xc4\x56\x1a\x38\x33\x83\x4e\x2e\xeb\x67\xe5\x42\x7f\x2f\xf8\x3f\xc8\xbd\x19\xc5\xa5\x79\x88\x24\x39\x23\x07\x05\x8d\x04\xdb\xcb\xb5\x74\xcc\xd8\xbb\x99\xa2\x49\x0b\xc1\x33\x72\x30\xdb\x92\x32\xc5\xb9\xb6\xee\x9e\x7a\xc6\x6a\x95\x13\xd2\x2f\x93\xfc\xb5\x27\x0d\xbf\x56\xbb\x6d\x63\x89\xb5\x87\x33\x95\x89\x74\xc6\xae\x01\x48\x2a\x85\x33\xa3\x7a\x78\xeb\x58\x13\xb2\x9a\x31\x5d\x8b\x10\x17\x9b\x9c\x2f\x31\xfe\xb6\xf2\x85\xb1\xe6\xaa\x03\xd3\xa1\x1d\xd3\xb9\x48\x78\x8c\xc0\xc1\xe4\xac\x4b\x3a\xc6\x1a\x63\x49\x4e\x49\x47\x5d\xb9\xb6\x96\xcf\xa0\x76\x87\x1d\x67\xac\x3b\xfc\x4f\x53\x85\xef\x9e\xf8\x3f\xf7\xf8\xaf\x48\x1f\xb9\x1c\xe9\x1e\xbd\x7d\x22\xfa\xa3\x7a\x07\x94\xe2\x9d\x01\x6b\x32\xf8\x04\x1e\x1d\x91\x3d\x39\x8b\x18\xd8\x73\x4e\x31\xc9\x46\x85\x4e\x1a\x9d\xde\xbe\xac\xb2\x68\x01\xb7\x7f\xab\xe7\xf9\x5b\x30\x7d\xa7\xdf\x1f\x53\xff\x4e\xbb\xe3\x57\xfb\x2f\x75\x3b\xd1\xe3\x44\xb3\x13\xc5\x8e\x7a\xfd\x00\x07\x46\x08\x90\x4c\x0e\x72\xf3\x55\x50\x3b\x7d\x84\x87\x05\xda\x72\xc0\x49\x1e\x0e\x7b\x70\xaf\x94\x8d\x2b\xb1\x4a\x4a\x7d\x75\x6f\xd5\x3f\xd7\xff\xbf\x07\xc8\xa9\x27\x97\x47\x27\xbe\x4e\xe0\xf2\xbe\xff\xfb\xcb\xf5\x7d\x9f\x2e\xed\xff\x78\x1e\x0e\x9f\xfd\x04\xe1\x2f\xd2\xce\xdf\x5d\x3e\x29\xf7\xfb\x61\x6c\xfd\xe1\x99\xf0\xf0\x48\xef\x7e\x7f\xf7\xff\x01\x00\x00\xff\xff\x64\x15\x03\x07\xec\x33\x00\x00")

func pinned_updateJsonBytes() ([]byte, error) {
	return bindataRead(
		_pinned_updateJson,
		"pinned_update.json",
	)
}

func pinned_updateJson() (*asset, error) {
	bytes, err := pinned_updateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pinned_update.json", size: 13292, mode: os.FileMode(0666), modTime: time.Unix(1722712358, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2f, 0x28, 0xa2, 0xc5, 0xfb, 0x94, 0x20, 0x72, 0xb1, 0xe5, 0x3c, 0x87, 0xcd, 0x65, 0xd2, 0x57, 0x85, 0xc7, 0x34, 0x7e, 0x7, 0x4e, 0x78, 0x96, 0xd9, 0x18, 0x31, 0x19, 0x57, 0x57, 0xbd, 0xdb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Discord.lnk":        discordLnk,
	"pinned_update.json": pinned_updateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Discord.lnk":        {discordLnk, map[string]*bintree{}},
	"pinned_update.json": {pinned_updateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
